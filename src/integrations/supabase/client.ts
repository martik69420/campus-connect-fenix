
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://nqbklvemcxemhgxlnyyq.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im5xYmtsdmVtY3hlbWhneGxueXlxIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDE1MTIyMTYsImV4cCI6MjA1NzA4ODIxNn0.4z96U7aHqFkOvK8GbdFSh9s8hYDDhUyo9ypstoKpBgo";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Create type helpers for our database tables
export type TablesInsert<T extends keyof Database['public']['Tables']> = 
  Database['public']['Tables'][T]['Insert'];

export type TablesRow<T extends keyof Database['public']['Tables']> = 
  Database['public']['Tables'][T]['Row'];

export type TablesUpdate<T extends keyof Database['public']['Tables']> = 
  Database['public']['Tables'][T]['Update'];

// Type helpers for common tables
export type Profile = TablesRow<'profiles'>;
export type Post = TablesRow<'posts'> & { 
  profiles: {
    username: string;
    display_name: string;
    avatar_url: string | null;
  },
  likes: { id: string }[];
  comments: { id: string }[];
};

// For PostContext usage - extending the post type with UI needs
export interface PostContextPost {
  id: string;
  userId: string;
  content: string;
  images?: string[];
  createdAt: Date;
  likes: string[];
  comments: any[];
  shares: number;
  isProfessional?: boolean;
  isShared?: boolean;
  originalPostId?: string;
}

// Ensure we're handling mapping between UI Post and Database Post 
export const mapDatabasePostToUIPost = (dbPost: Post): PostContextPost => {
  return {
    id: dbPost.id,
    userId: dbPost.user_id,
    content: dbPost.content,
    images: dbPost.images as string[] | undefined,
    createdAt: new Date(dbPost.created_at),
    likes: dbPost.likes.map(like => like.id),
    comments: dbPost.comments,
    shares: 0, // This might need to be tracked differently
    isProfessional: dbPost.is_professional,
  };
};
